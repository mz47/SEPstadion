
package drawing;

import dataStorage.block;
import dataStorage.category;
import dataStorage.data;
import dataStorage.game;
import dataStorage.seat;
import dataStorage.stadium;
import dataStorage.wrapper;
import java.util.ArrayList;
import javax.el.MethodExpression;
import javax.enterprise.context.Dependent;
import javax.faces.application.Application;
import javax.faces.component.html.HtmlCommandLink;
import javax.faces.component.html.HtmlForm;
import javax.faces.component.html.HtmlInputText;
import javax.faces.component.html.HtmlOutputLabel;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.inject.Named;

@Named(value = "cup")
@Dependent
public class cup {
    
    private static final int SEATS_IN_ROW = 20;
    
    public cup()
    {
        drawGames();
    }
    
    public String startUp()
    {
        ArrayList<game> games = wrapper.getGames();
        //TODO eventuell statisch wenn mehr als 1 stadium
        stadium stadium = wrapper.getStadium(0);
        data.setSelectedSeats(new ArrayList<>());
        data.setGames(games);
        data.setStadium(stadium);
        
        return "Index";
    }

    public String selectCategory(String blockPosition, int categoryIndex)
    {
        data.setActiveBlock(data.getActiveStadium().getBlock(blockPosition));
        data.setActiveCategory(data.getActiveStadium().getBlock(blockPosition).getCategory(categoryIndex));
        return "Block";
    }
    
    public String selectSeat(int index)
    {
        block b = data.getStadium().getBlock(data.getActiveBlock().getPos());
        System.out.println("block name: " + b.getName());
        category c = b.getCategory(data.getActiveCategory().getName());
        System.out.println("cat name: " + c.getName());
        seat s = c.getSeat(index);
        s.setOccupied(true);
        data.addSelectedSeat(s);
        
        //data.getActiveCategory().getSeat(index).setOccupied(true);
        //seat test = data.getActiveCategory().getSeat(index);
        //test.setId(index);
        //data.setActiveSeat(test);

        return "Block";
    }
        
    public String selectGame(int gameId, int stadiumId)
    {
        System.out.println("gameId: " + gameId + " stadiumId: " + stadiumId);
        
        game game = data.getGames().get(gameId - 1);
        
        data.setActiveGame(game);
        data.setActiveStadium(data.getStadium());
        return "Stadion";
    }
        
    public static HtmlForm drawGames()
    {
        try
        {
            ArrayList<game> games = wrapper.getGames();
            Application app = FacesContext.getCurrentInstance().getApplication();
            HtmlForm form = (HtmlForm) app.createComponent(HtmlForm.COMPONENT_TYPE);

            if(games.isEmpty() == false)
            {
                for (game g : games)
                {
                    HtmlCommandLink link = (HtmlCommandLink) app.createComponent(HtmlCommandLink.COMPONENT_TYPE);
                    HtmlOutputText newline = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);

                    link.setValue(g.getDate() + ": " + g.getTeam1() + " vs. " + g.getTeam2() + " (StadionID: " + g.getStadiumId() + ")");
                    link.setActionExpression(createMethodExpression("#{cup.selectGame("+g.getId()+", "+g.getStadiumId()+")}", String.class));
                    link.setId("game_" + g.getId());

                    newline.setValue("<br /><br />");
                    newline.setEscape(false);
                    newline.setId("newline_" + g.getId());

                    form.getChildren().add(link);
                    form.getChildren().add(newline);
                }
            }
            else
            {
                HtmlOutputText nogames = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
                nogames.setValue("Keine Spiele gefunden.");
                form.getChildren().add(nogames);
            }
            form.setId("form_games");
            return form;
        }
        catch(Exception ex)
        {
            return null;
        }
    }

    public static HtmlForm drawSeats()
    {
        int seats = data.getActiveCategory().getNumberOfSeats();
        Application app = FacesContext.getCurrentInstance().getApplication();
        HtmlForm form = (HtmlForm) app.createComponent(HtmlForm.COMPONENT_TYPE);
        form.setId("form_seats");
        HtmlOutputText back = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
        back.setValue("<p><a href='Stadion.xhtml'>Zurück</a></p>");
        back.setEscape(false);
        back.setId("back");
        form.getChildren().add(back);
        if(seats == 0)
        {
            //TODO css info div
            HtmlOutputText noSeats = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
            noSeats.setValue("Keine Sitzplätze in dieser Kategorie gefunden.<br />Bitte wählen Sie eine andere Kategorie.");
            noSeats.setId("noSeats");
            noSeats.setEscape(false);
            form.getChildren().add(noSeats);
        }
        else
        {
            String style;
            for(int i = 0; i < seats; i++)
            {
                if(data.getActiveCategory().getSeat(i).isOccupied() == true)
                {
                    style = "occupied";
                }
                else
                {
                    style = "free";
                }

                HtmlCommandLink link = (HtmlCommandLink) app.createComponent(HtmlCommandLink.COMPONENT_TYPE);
                link.setValue(i);
                link.setActionExpression(createMethodExpression("#{cup.selectSeat("+i+")}", String.class));
                link.setId("seat_" + i);

                HtmlOutputText openDiv = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
                HtmlOutputText closeDiv = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);


                //openDiv.setValue("<div class='"+style+"'>");
                openDiv.setValue("<div class='seat' id='" + style + "'>");
                closeDiv.setValue("</div>");
                openDiv.setEscape(false);
                closeDiv.setEscape(false);


                if(i % SEATS_IN_ROW == 0)
                {
                    HtmlOutputText clear = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
                    clear.setValue("<div class='clear'></div>");
                    clear.setId("clear_" + i);
                    clear.setEscape(false);
                    form.getChildren().add(clear);
                }
                form.getChildren().add(openDiv);
                form.getChildren().add(link);
                form.getChildren().add(closeDiv);
            }
        }
        return form;
    }
    
    public static HtmlPanelGrid drawPassportInput()
    {
        int counter = 0;
        ArrayList<seat> seats = data.getSelectedSeat();
        Application app = FacesContext.getCurrentInstance().getApplication();
        HtmlPanelGrid form = (HtmlPanelGrid) app.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        for(seat s : seats)
        {
            HtmlOutputLabel label = (HtmlOutputLabel) app.createComponent(HtmlOutputLabel.COMPONENT_TYPE);
            HtmlInputText text = (HtmlInputText) app.createComponent(HtmlInputText.COMPONENT_TYPE);
            
            label.setValue("Passnummer " + counter + ": ");
            
            
            form.getChildren().add(label);
            form.getChildren().add(text);
        }
        
        return form;
    }
    
    private static MethodExpression createMethodExpression(String expression, Class<?> returnType) {
        FacesContext context = FacesContext.getCurrentInstance();
        MethodExpression me = context.getApplication().getExpressionFactory().createMethodExpression(context.getELContext(), expression, returnType, new Class[0]);
        return me;
    }
    
}
