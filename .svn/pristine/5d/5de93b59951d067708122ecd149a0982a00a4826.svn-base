
package drawing;

import buying.customer;
import buying.transaction;
import dataStorage.block;
import dataStorage.category;
import dataStorage.data;
import dataStorage.game;
import dataStorage.god;
import dataStorage.seat;
import dataStorage.stadium;
import dataStorage.wrapper;
import email.email;
import java.util.ArrayList;
import java.util.Date;
import javax.el.MethodExpression;
import javax.enterprise.context.Dependent;
import javax.faces.application.Application;
import javax.faces.component.html.HtmlCommandLink;
import javax.faces.component.html.HtmlForm;
import javax.faces.component.html.HtmlInputText;
import javax.faces.component.html.HtmlOutputLabel;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.inject.Named;

@Named(value = "cup")
@Dependent
public abstract class cup {
    
    private static final int SEATS_IN_ROW = 20;
    
    public cup()
    {
        //drawGames();
    }
    
    public static String startUp()
    {
        ArrayList<game> games = wrapper.getGames();
        ArrayList<seat> seats = new ArrayList<>();
        //TODO eventuell statisch wenn mehr als 1 stadium
        stadium stadium = wrapper.getStadium(0);
        
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("seats", seats);
        
        god.setGames(games);
        god.setStadium(stadium);
        god.setSeats(new ArrayList<>());
        god.setTransactions(new ArrayList<>());
        
        return "Index";
    }

    public static String selectCategory(String blockPosition, int categoryIndex)
    {
        stadium stadium = (stadium) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("stadium");
        block block = stadium.getBlock(blockPosition);
        category category = block.getCategory(categoryIndex);
        
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("block", block);
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("category", category);
        
        return "Block";
    }
    
    public static String selectSeat(int index)
    {
        ArrayList<seat> seats = (ArrayList<seat>) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("seats");
        
        category c = (category) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("category");
        System.out.println("selected seat, category: " + c.getName());
        seat s = c.getSeat(index);
        System.out.println("selected seat, seat id: " + s.getId());
        //s.setOccupied(true);
        System.out.println("seat " + s.getId() + " set occupied");
        //endgültige reservierung        
        //god.addSeat(s);
        if(seats.contains(s))
        {
            seats.remove(s);
        }
        else
        {
            seats.add(s);
        }
        
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("seats", seats);
        
        return "Block";
    }
        
    public static String selectGame(int gameId, int stadiumId)
    {
        game game = god.getGames().get(gameId - 1);
        stadium stadium = god.getStadium();
        
        System.out.println("selected game: " + game.getDate());
        
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("game", game);
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("stadium", stadium);

        return "Stadion";
    }
        
    public static HtmlForm drawGames()
    {
        try
        {
            ArrayList<game> games = wrapper.getGames();
            Application app = FacesContext.getCurrentInstance().getApplication();
            HtmlForm form = (HtmlForm) app.createComponent(HtmlForm.COMPONENT_TYPE);

            if(games.isEmpty() == false)
            {
                for (game g : games)
                {
                    HtmlCommandLink link = (HtmlCommandLink) app.createComponent(HtmlCommandLink.COMPONENT_TYPE);
                    HtmlOutputText newline = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);

                    link.setValue(g.getDate() + ": " + g.getTeam1() + " vs. " + g.getTeam2() + " (StadionID: " + g.getStadiumId() + ")");
                    link.setActionExpression(createMethodExpression("#{bean_cup.selectGame("+g.getId()+", "+g.getStadiumId()+")}", String.class));
                    link.setId("game_" + g.getId());

                    newline.setValue("<br /><br />");
                    newline.setEscape(false);
                    newline.setId("newline_" + g.getId());

                    form.getChildren().add(link);
                    form.getChildren().add(newline);
                }
            }
            else
            {
                HtmlOutputText nogames = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
                nogames.setValue("Keine Spiele gefunden.");
                form.getChildren().add(nogames);
            }
            form.setId("form_games");
            return form;
        }
        catch(Exception ex)
        {
            return null;
        }
    }

    public static HtmlForm drawSeats()
    {
        ArrayList<seat> selectedSeats = (ArrayList<seat>) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("seats");
        
        category category = (category) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("category");
        int seats = category.getNumberOfSeats();
        Application app = FacesContext.getCurrentInstance().getApplication();
        HtmlForm form = (HtmlForm) app.createComponent(HtmlForm.COMPONENT_TYPE);
        form.setId("form_seats");
        HtmlOutputText back = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
        back.setValue("<p><a href='Stadion.xhtml'>Zurück</a></p>");
        back.setEscape(false);
        back.setId("back");
        form.getChildren().add(back);
        if(seats == 0)
        {
            //TODO css info div
            HtmlOutputText noSeats = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
            noSeats.setValue("Keine Sitzplätze in dieser Kategorie gefunden.<br />Bitte wählen Sie eine andere Kategorie.");
            noSeats.setId("noSeats");
            noSeats.setEscape(false);
            form.getChildren().add(noSeats);
        }
        else
        {
            String style = "free";
            for(int i = 0; i < seats; i++)
            {
                HtmlCommandLink link = (HtmlCommandLink) app.createComponent(HtmlCommandLink.COMPONENT_TYPE);
                link.setValue(i);
                
                if(category.getSeat(i).isOccupied() == true)
                {
                    style = "occupied";
                    link.setDisabled(true);
                }
                //TODO nullpointerexception bei concurrency?!
                else if(selectedSeats.contains(category.getSeat(i)))
                {
                    style = "selected";
                }
                else
                {
                    style = "free";
                }

                
                
                link.setActionExpression(createMethodExpression("#{bean_cup.selectSeat("+i+")}", String.class));
                //link.setActionExpression(createMethodExpression("Stadium", String.class));
                link.setId("seat_" + i);

                HtmlOutputText openDiv = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
                HtmlOutputText closeDiv = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);


                //openDiv.setValue("<div class='"+style+"'>");
                openDiv.setValue("<div class='seat' id='" + style + "'>");
                closeDiv.setValue("</div>");
                openDiv.setEscape(false);
                closeDiv.setEscape(false);


                if(i % SEATS_IN_ROW == 0)
                {
                    HtmlOutputText clear = (HtmlOutputText) app.createComponent(HtmlOutputText.COMPONENT_TYPE);
                    clear.setValue("<div class='clear'></div>");
                    clear.setId("clear_" + i);
                    clear.setEscape(false);
                    form.getChildren().add(clear);
                }
                form.getChildren().add(openDiv);
                form.getChildren().add(link);
                form.getChildren().add(closeDiv);
            }
        }
        return form;
    }
    
    public static HtmlPanelGrid drawPassportInput()
    {
        int counter = 0;
        category c = (category) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("category");
        ArrayList<seat> seats = (ArrayList<seat>) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("seats");
        
        Application app = FacesContext.getCurrentInstance().getApplication();
        HtmlPanelGrid form = (HtmlPanelGrid) app.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        for(seat s : seats)
        {
            HtmlOutputLabel label = (HtmlOutputLabel) app.createComponent(HtmlOutputLabel.COMPONENT_TYPE);
            HtmlInputText text = (HtmlInputText) app.createComponent(HtmlInputText.COMPONENT_TYPE);
            
            label.setValue("Passnummer für Platz #" + s.getId() + ": ");

            form.getChildren().add(label);
            form.getChildren().add(text);
            
            counter++;
        }
        return form;
    }
    
    public static String checkout()
    {
        ArrayList<seat> seats = (ArrayList<seat>) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("seats");
        block current_block = (block) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("block");
        block god_block = god.getStadium().getBlock(current_block.getPos());
        category current_category = (category) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("category");
        category god_category = god_block.getCategory(current_category.getName());
        if(seats.size() > 0)
        {
            for(seat s : seats)
            {
                if(god_category.getSeats().contains(s))
                {
                    god_category.getSeat(s.getId()).setOccupied(true);
                }
            }
            
            System.out.println(seats.size() + " seats on checkout");
            
            customer test = new customer("mpnw47@gmail.com", 1234);
            transaction trans = new transaction(test, seats, new Date());
            god.addTransaction(trans);
            //email.versendeMail(test.getEmail(), "test", "blablubb");
            
            seats.clear();
            return "Block";
        }
        else
        {
            // info box "keine plätze gekauft"
            return "Block";
        }
    }
    
    public static String buySeats()
    {
        ArrayList<seat> seats = (ArrayList<seat>) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("seats");
        System.out.println("seats size at buyseats: " + seats.size());
        if(seats.size() > 0)
        {
            return "BuySeats";
        }
        else
        {
            return "Block";
        }
    }
    
    private static MethodExpression createMethodExpression(String expression, Class<?> returnType) {
        FacesContext context = FacesContext.getCurrentInstance();
        MethodExpression me = context.getApplication().getExpressionFactory().createMethodExpression(context.getELContext(), expression, returnType, new Class[0]);
        return me;
    }
    
}
